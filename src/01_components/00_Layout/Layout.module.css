/* 1. 레이아웃 유연성
  grid-template-rows: auto 1fr auto와 같은 CSS Grid를 사용하면 콘텐츠의 크기에 따라 레이아웃이 자동으로 조정
  1fr로 지정된 영역은 화면 크기에 따라 비율적으로 늘어나거나 줄어든다. */

.layout {
    display: grid;
    grid-template-rows: auto 1fr auto; /* Header, Main, Footer 적용*/
    height: 100vh /* 전체 레이아웃의 높이를 브라우저 뷰포트 높이에 맞춤 */
  }

/* 2. 반응형 디자인의 기초 적용
  내부 패딩으로 여백을 제공하여 UI가 깔끔하게 유지.   */

/* 3. 컴포넌트 중심 설계
레이아웃은 공통 구조만 관리하고, 각 페이지는 라우터별 콘텐츠를 담당하기 때문에 기능과 스타일이 독립적으로 확장 가능.   */

  .layout-header {
    background-color: red;
    padding: 10px; /*내부 패딩*/
  }
  
.layout-main {
    background-color: blue;
    padding: 20px; /*내부 패딩*/
  }
  
.layout-footer {
    background-color: yellow;
    padding: 10px; /*내부 패딩*/
    text-align: center; 
  }